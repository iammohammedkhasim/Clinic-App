{"version":3,"sources":["components/Home.jsx","components/Haematology.jsx","components/Biochemistry.jsx","components/Microbiology.jsx","components/tests/Tests.jsx","components/tests/Addtestdialog.jsx","components/Reports/Create.jsx","components/Reports/Get.jsx","components/Pricing.jsx","components/Layout.jsx","components/Navigationbar.jsx","components/Nomatch.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","Jumbotron","fluid","Container","Haematology","Biochemistry","Microbiology","Tests","this","props","selectedTests","length","totalTests","onClick","deSelectAll","selectAll","name","exists","forEach","test","deSelect","select","Table","striped","bordered","hover","variant","department","renderAllCheckBox","map","tag","key","renderCheckBox","price","Component","Addtestdialog","Modal","show","value","onHide","onClose","backdrop","Header","closeButton","Title","Body","Footer","Button","haematologyTests","microBiologyTests","bioChemistryTests","Create","state","phoneNumber","haematologySelectedTests","bioChemistrySelectedTests","microBiologySelectedTests","bioChemistryTestsShow","haematologyTestsShow","microBiologyTestsShow","handleSubmit","ev","preventDefault","axios","post","then","get","responseType","res","pdfBlob","Blob","data","type","saveAs","handleChange","target","id","setState","handleAddTest","handleClose","currentTarget","getAttribute","handleSelectAll","e","parentElement","handleDeSelectAll","handleSelect","presentTestItems","testName","children","innerText","push","handleDeSelect","filter","totalCost","Form","Label","Fragment","Accordion","defaultActiveKey","Card","Toggle","as","eventKey","Row","Group","Col","controlId","Control","placeholder","onChange","phone_number","DropdownButton","title","Dropdown","Item","onSelect","ListGroup","index","renderTotalCost","Get","Pricing","Layout","NavigationBar","Navbar","collapseOnSelect","expand","bg","Brand","href","src","width","height","className","alt","aria-controls","Collapse","Nav","NavDropdown","Nomatch","App","exact","path","component","Createreport","Getreport","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e825a78.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Jumbotron fluid>\r\n      <Container>\r\n        <h1>Welcome!</h1>\r\n        <p>This is a sample data. Display any data here.</p>\r\n      </Container>\r\n    </Jumbotron>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nconst Haematology = () => {\r\n  return <h1>Haematology</h1>;\r\n};\r\n\r\nexport default Haematology;\r\n","import React from \"react\";\r\nconst Biochemistry = () => {\r\n  return <h1>Biochemistry</h1>;\r\n};\r\n\r\nexport default Biochemistry;\r\n","import React from \"react\";\r\nconst Microbiology = () => {\r\n  return <h1>Microbiology</h1>;\r\n};\r\n\r\nexport default Microbiology;\r\n","import React, { Component } from \"react\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from \"react-icons/md\";\r\n\r\nclass Tests extends Component {\r\n  renderAllCheckBox() {\r\n    if (this.props.selectedTests.length === this.props.totalTests.length)\r\n      return <MdCheckBox onClick={this.props.deSelectAll} />;\r\n    else return <MdCheckBoxOutlineBlank onClick={this.props.selectAll} />;\r\n  }\r\n  renderCheckBox(name) {\r\n    var exists;\r\n    this.props.selectedTests.forEach(function(test) {\r\n      if (test.name === name) {\r\n        exists = true;\r\n      }\r\n    });\r\n    if (exists) return <MdCheckBox onClick={this.props.deSelect} />;\r\n    else return <MdCheckBoxOutlineBlank onClick={this.props.select} />;\r\n  }\r\n  render() {\r\n    return (\r\n      <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            <th department={this.props.department}>\r\n              {this.renderAllCheckBox()}\r\n            </th>\r\n            <th>Name</th>\r\n            <th>Price</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.totalTests.map(tag => (\r\n            <tr key={tag.name}>\r\n              <td department={this.props.department}>\r\n                {this.renderCheckBox(tag.name)}\r\n              </td>\r\n              <td>{tag.name}</td>\r\n              <td>{tag.price}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tests;\r\n","import React, { Component } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Tests from \"./Tests\";\r\n\r\nclass Addtestdialog extends Component {\r\n  render() {\r\n    return (\r\n      <Modal\r\n        show={this.props.value}\r\n        onHide={this.props.onClose}\r\n        backdrop=\"static\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Select tests</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Tests\r\n            selectedTests={this.props.selectedTests}\r\n            totalTests={this.props.totalTests}\r\n            selectAll={this.props.selectAll}\r\n            deSelectAll={this.props.deSelectAll}\r\n            select={this.props.select}\r\n            deSelect={this.props.deSelect}\r\n            department={this.props.department}\r\n          />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={this.props.onClose}\r\n            department={this.props.department}\r\n          >\r\n            close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Addtestdialog;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport axios from \"axios\";\r\nimport { saveAs } from \"file-saver\";\r\nimport Addtestdialog from \"../tests/Addtestdialog\";\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nconst haematologyTests = [\r\n  {\r\n    name: \"test1\",\r\n    price: 100\r\n  },\r\n  {\r\n    name: \"test2\",\r\n    price: 100\r\n  },\r\n  {\r\n    name: \"test3\",\r\n    price: 100\r\n  },\r\n  {\r\n    name: \"test4\",\r\n    price: 100\r\n  }\r\n];\r\nconst microBiologyTests = [\r\n  {\r\n    name: \"test5\",\r\n    price: 100\r\n  },\r\n  {\r\n    name: \"test6\",\r\n    price: 100\r\n  },\r\n  {\r\n    name: \"test7\",\r\n    price: 100\r\n  },\r\n  {\r\n    name: \"test8\",\r\n    price: 100\r\n  }\r\n];\r\nconst bioChemistryTests = [\r\n  {\r\n    name: \"test9\",\r\n    price: 100\r\n  },\r\n  {\r\n    name: \"test10\",\r\n    price: 100\r\n  },\r\n  {\r\n    name: \"test11\",\r\n    price: 100\r\n  },\r\n  {\r\n    name: \"test12\",\r\n    price: 100\r\n  }\r\n];\r\nclass Create extends Component {\r\n  state = {\r\n    name: \"\",\r\n    phoneNumber: \"\",\r\n    haematologySelectedTests: [],\r\n    bioChemistrySelectedTests: [],\r\n    microBiologySelectedTests: [],\r\n    bioChemistryTestsShow: false,\r\n    haematologyTestsShow: false,\r\n    microBiologyTestsShow: false\r\n  };\r\n\r\n  handleSubmit = ev => {\r\n    ev.preventDefault();\r\n    axios\r\n      .post(\"/create-pdf\", this.state)\r\n      .then(() => axios.get(\"fetch-pdf\", { responseType: \"blob\" }))\r\n      .then(res => {\r\n        const pdfBlob = new Blob([res.data], { type: \"application/pdf\" });\r\n\r\n        saveAs(pdfBlob, this.state.name + \".pdf\");\r\n      });\r\n  };\r\n\r\n  handleChange = ({ target: { value, id } }) => {\r\n    this.setState({ [id]: value });\r\n  };\r\n\r\n  handleAddTest = (test, data) => {\r\n    data.preventDefault();\r\n    if (test === \"Haematology\") {\r\n      this.setState({ haematologyTestsShow: true });\r\n    } else if (test === \"Biochemistry\") {\r\n      this.setState({ bioChemistryTestsShow: true });\r\n    } else if (test === \"Microbiology\") {\r\n      this.setState({ microBiologyTestsShow: true });\r\n    }\r\n  };\r\n\r\n  handleClose = data => {\r\n    data.preventDefault();\r\n    var test = data.currentTarget.getAttribute(\"department\");\r\n    if (test === \"Haematology\") {\r\n      this.setState({ haematologyTestsShow: false });\r\n    } else if (test === \"Biochemistry\") {\r\n      this.setState({ bioChemistryTestsShow: false });\r\n    } else if (test === \"Microbiology\") {\r\n      this.setState({ microBiologyTestsShow: false });\r\n    }\r\n  };\r\n\r\n  handleSelectAll = e => {\r\n    e.preventDefault();\r\n    var test = e.currentTarget.parentElement.getAttribute(\"department\");\r\n    if (test === \"Haematology\") {\r\n      this.setState({ haematologySelectedTests: haematologyTests });\r\n    } else if (test === \"Biochemistry\") {\r\n      this.setState({ bioChemistrySelectedTests: bioChemistryTests });\r\n    } else if (test === \"Microbiology\") {\r\n      this.setState({ microBiologySelectedTests: microBiologyTests });\r\n    }\r\n  };\r\n\r\n  handleDeSelectAll = e => {\r\n    e.preventDefault();\r\n    var test = e.currentTarget.parentElement.getAttribute(\"department\");\r\n    if (test === \"Haematology\") {\r\n      this.setState({ haematologySelectedTests: [] });\r\n    } else if (test === \"Biochemistry\") {\r\n      this.setState({ bioChemistrySelectedTests: [] });\r\n    } else if (test === \"Microbiology\") {\r\n      this.setState({ microBiologySelectedTests: [] });\r\n    }\r\n  };\r\n\r\n  handleSelect = e => {\r\n    e.preventDefault();\r\n    var test = e.currentTarget.parentElement.getAttribute(\"department\"),\r\n      testName =\r\n        e.currentTarget.parentElement.parentElement.children[1].innerText,\r\n      presentTestItems;\r\n    if (test === \"Haematology\") {\r\n      presentTestItems = [...this.state.haematologySelectedTests];\r\n      haematologyTests.forEach(function(test) {\r\n        if (test.name === testName) {\r\n          presentTestItems.push(test);\r\n        }\r\n      });\r\n      this.setState({ haematologySelectedTests: presentTestItems });\r\n    } else if (test === \"Biochemistry\") {\r\n      presentTestItems = [...this.state.bioChemistrySelectedTests];\r\n      bioChemistryTests.forEach(function(test) {\r\n        if (test.name === testName) {\r\n          presentTestItems.push(test);\r\n        }\r\n      });\r\n      this.setState({ bioChemistrySelectedTests: presentTestItems });\r\n    } else if (test === \"Microbiology\") {\r\n      presentTestItems = [...this.state.microBiologySelectedTests];\r\n      microBiologyTests.forEach(function(test) {\r\n        if (test.name === testName) {\r\n          presentTestItems.push(test);\r\n        }\r\n      });\r\n      this.setState({ microBiologySelectedTests: presentTestItems });\r\n    }\r\n  };\r\n\r\n  handleDeSelect = e => {\r\n    e.preventDefault();\r\n    var test = e.currentTarget.parentElement.getAttribute(\"department\"),\r\n      testName =\r\n        e.currentTarget.parentElement.parentElement.children[1].innerText,\r\n      presentTestItems;\r\n    if (test === \"Haematology\") {\r\n      presentTestItems = [...this.state.haematologySelectedTests];\r\n      presentTestItems = presentTestItems.filter(function(test) {\r\n        return !(test.name === testName);\r\n      });\r\n      this.setState({ haematologySelectedTests: presentTestItems });\r\n    } else if (test === \"Biochemistry\") {\r\n      presentTestItems = [...this.state.bioChemistrySelectedTests];\r\n      presentTestItems = presentTestItems.filter(function(test) {\r\n        return !(test.name === testName);\r\n      });\r\n      this.setState({ bioChemistrySelectedTests: presentTestItems });\r\n    } else if (test === \"Microbiology\") {\r\n      presentTestItems = [...this.state.microBiologySelectedTests];\r\n      presentTestItems = presentTestItems.filter(function(test) {\r\n        return !(test.name === testName);\r\n      });\r\n      this.setState({ microBiologySelectedTests: presentTestItems });\r\n    }\r\n  };\r\n\r\n  renderTotalCost() {\r\n    var totalCost = 0;\r\n    this.state.haematologySelectedTests.forEach(function(test) {\r\n      totalCost += test.price;\r\n    });\r\n    this.state.bioChemistrySelectedTests.forEach(function(test) {\r\n      totalCost += test.price;\r\n    });\r\n    this.state.microBiologySelectedTests.forEach(function(test) {\r\n      totalCost += test.price;\r\n    });\r\n    return <Form.Label>{totalCost}</Form.Label>;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Jumbotron fluid>\r\n          <Container>\r\n            <Accordion defaultActiveKey=\"0\">\r\n              <Card>\r\n                <Card.Header>\r\n                  <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                    Report\r\n                  </Accordion.Toggle>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  <Form>\r\n                    <Form.Row>\r\n                      <Form.Group as={Col} controlId=\"name\">\r\n                        <Form.Label>Name</Form.Label>\r\n                        <Form.Control\r\n                          placeholder=\"Enter name\"\r\n                          value={this.state.name}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                      </Form.Group>\r\n                      <Form.Group as={Col} controlId=\"phoneNumber\">\r\n                        <Form.Label>Mobile:</Form.Label>\r\n                        <Form.Control\r\n                          placeholder=\"Phone number\"\r\n                          value={this.state.phone_number}\r\n                          onChange={this.handleChange}\r\n                        />\r\n                      </Form.Group>\r\n                    </Form.Row>\r\n                    <Container>\r\n                      <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"testSelection\">\r\n                          <DropdownButton\r\n                            id=\"dropdown-test-button\"\r\n                            title=\"Add tests\"\r\n                          >\r\n                            <Dropdown.Item\r\n                              onSelect={this.handleAddTest}\r\n                              value=\"Haematology\"\r\n                              eventKey=\"Haematology\"\r\n                            >\r\n                              Haematology\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item\r\n                              onSelect={this.handleAddTest}\r\n                              value=\"Microbiology\"\r\n                              eventKey=\"Microbiology\"\r\n                            >\r\n                              Microbiology\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item\r\n                              onSelect={this.handleAddTest}\r\n                              value=\"Biochemistry\"\r\n                              eventKey=\"Biochemistry\"\r\n                            >\r\n                              Biochemistry\r\n                            </Dropdown.Item>\r\n                          </DropdownButton>\r\n                        </Form.Group>\r\n                      </Form.Row>\r\n                      <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"haematologytestslabel\">\r\n                          <ListGroup>\r\n                            <ListGroup.Item\r\n                              key=\"HaematologyLabel\"\r\n                              variant=\"dark\"\r\n                            >\r\n                              Haematology\r\n                            </ListGroup.Item>\r\n                          </ListGroup>\r\n                        </Form.Group>\r\n                      </Form.Row>\r\n                      <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"haematologytests\">\r\n                          <ListGroup>\r\n                            <ListGroup.Item>\r\n                              <Table>\r\n                                <thead>\r\n                                  <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Price</th>\r\n                                  </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                  {this.state.haematologySelectedTests.map(\r\n                                    (tag, index) => (\r\n                                      <tr key={index}>\r\n                                        <td>{tag.name}</td>\r\n                                        <td>{tag.price}</td>\r\n                                      </tr>\r\n                                    )\r\n                                  )}\r\n                                </tbody>\r\n                              </Table>\r\n                            </ListGroup.Item>\r\n                          </ListGroup>\r\n                        </Form.Group>\r\n                      </Form.Row>\r\n                      <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"microbiologytestslabel\">\r\n                          <ListGroup>\r\n                            <ListGroup.Item\r\n                              key=\"MicrobiologyLabel\"\r\n                              variant=\"dark\"\r\n                            >\r\n                              Microbiology\r\n                            </ListGroup.Item>\r\n                          </ListGroup>\r\n                        </Form.Group>\r\n                      </Form.Row>\r\n                      <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"microbiologytests\">\r\n                          <ListGroup>\r\n                            <ListGroup.Item>\r\n                              <Table>\r\n                                <thead>\r\n                                  <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Price</th>\r\n                                  </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                  {this.state.microBiologySelectedTests.map(\r\n                                    (tag, index) => (\r\n                                      <tr key={index}>\r\n                                        <td>{tag.name}</td>\r\n                                        <td>{tag.price}</td>\r\n                                      </tr>\r\n                                    )\r\n                                  )}\r\n                                </tbody>\r\n                              </Table>\r\n                            </ListGroup.Item>\r\n                          </ListGroup>\r\n                        </Form.Group>\r\n                      </Form.Row>\r\n                      <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"bioChemistrytestslabel\">\r\n                          <ListGroup>\r\n                            <ListGroup.Item\r\n                              key=\"BiochemistryLabel\"\r\n                              variant=\"dark\"\r\n                            >\r\n                              Biochemistry\r\n                            </ListGroup.Item>\r\n                          </ListGroup>\r\n                        </Form.Group>\r\n                      </Form.Row>\r\n                      <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"bioChemistrytests\">\r\n                          <ListGroup>\r\n                            <ListGroup.Item>\r\n                              <Table>\r\n                                <thead>\r\n                                  <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Price</th>\r\n                                  </tr>\r\n                                </thead>\r\n                                <tbody>\r\n                                  {this.state.bioChemistrySelectedTests.map(\r\n                                    (tag, index) => (\r\n                                      <tr key={index}>\r\n                                        <td>{tag.name}</td>\r\n                                        <td>{tag.price}</td>\r\n                                      </tr>\r\n                                    )\r\n                                  )}\r\n                                </tbody>\r\n                              </Table>\r\n                            </ListGroup.Item>\r\n                          </ListGroup>\r\n                        </Form.Group>\r\n                      </Form.Row>\r\n                    </Container>\r\n                    <Container>\r\n                      <Form.Row>\r\n                        <Form.Group as={Col} controlId=\"total\">\r\n                          <ListGroup>\r\n                            <ListGroup.Item variant=\"success\">\r\n                              <Form.Label>Total:</Form.Label>\r\n                              <Form.Label>{this.renderTotalCost()}</Form.Label>\r\n                            </ListGroup.Item>\r\n                          </ListGroup>\r\n                        </Form.Group>\r\n                      </Form.Row>\r\n                    </Container>\r\n                  </Form>\r\n                </Card.Body>\r\n              </Card>\r\n            </Accordion>\r\n          </Container>\r\n        </Jumbotron>\r\n        <Addtestdialog\r\n          key=\"Haematology\"\r\n          value={this.state.haematologyTestsShow}\r\n          onClose={this.handleClose}\r\n          totalTests={haematologyTests}\r\n          selectedTests={this.state.haematologySelectedTests}\r\n          selectAll={this.handleSelectAll}\r\n          deSelectAll={this.handleDeSelectAll}\r\n          select={this.handleSelect}\r\n          deSelect={this.handleDeSelect}\r\n          department=\"Haematology\"\r\n        />\r\n        <Addtestdialog\r\n          key=\"Microbiology\"\r\n          value={this.state.microBiologyTestsShow}\r\n          onClose={this.handleClose}\r\n          selectedTests={this.state.microBiologySelectedTests}\r\n          totalTests={microBiologyTests}\r\n          selectAll={this.handleSelectAll}\r\n          deSelectAll={this.handleDeSelectAll}\r\n          select={this.handleSelect}\r\n          deSelect={this.handleDeSelect}\r\n          department=\"Microbiology\"\r\n        />\r\n        <Addtestdialog\r\n          key=\"Biochemistry\"\r\n          value={this.state.bioChemistryTestsShow}\r\n          onClose={this.handleClose}\r\n          selectedTests={this.state.bioChemistrySelectedTests}\r\n          totalTests={bioChemistryTests}\r\n          selectAll={this.handleSelectAll}\r\n          deSelectAll={this.handleDeSelectAll}\r\n          select={this.handleSelect}\r\n          deSelect={this.handleDeSelect}\r\n          department=\"Biochemistry\"\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Create;\r\n","import React from \"react\";\r\nconst Get = () => {\r\n  return <h1>Get</h1>;\r\n};\r\n\r\nexport default Get;\r\n","import React from \"react\";\r\nconst Pricing = () => {\r\n  return <h1>Pricing</h1>;\r\n};\r\n\r\nexport default Pricing;\r\n","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Layout = props => {\r\n  return <Container>{props.children}</Container>;\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\r\n\r\nconst NavigationBar = () => {\r\n  return (\r\n    <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"/\">\r\n        <img\r\n          src=\"images/clinic.png\"\r\n          width=\"30\"\r\n          height=\"30\"\r\n          className=\"d-inline-block align-top\"\r\n          alt=\"Clinic logo\"\r\n        />\r\n        Clinic\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n      <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <NavDropdown title=\"Reports\" id=\"collasible-reports-nav-dropdown\">\r\n            <NavDropdown.Item href=\"createreport\">\r\n              Create report\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item href=\"getreport\">Get report</NavDropdown.Item>\r\n          </NavDropdown>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default NavigationBar;\r\n","import React from \"react\";\r\nconst Nomatch = () => {\r\n  return <h1>Nothing Here!!</h1>;\r\n};\r\n\r\nexport default Nomatch;\r\n","import React from \"react\";\nimport Home from \"./components/Home\";\nimport Haematology from \"./components/Haematology\";\nimport Biochemistry from \"./components/Biochemistry\";\nimport Microbiology from \"./components/Microbiology\";\nimport Createreport from \"./components/Reports/Create\";\nimport Getreport from \"./components/Reports/Get\";\nimport Pricing from \"./components/Pricing\";\nimport Layout from \"./components/Layout\";\nimport NavigationBar from \"./components/Navigationbar\";\nimport Nomatch from \"./components/Nomatch\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavigationBar />\n      <Layout>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/haematology\" component={Haematology} />\n            <Route path=\"/biochemistry\" component={Biochemistry} />\n            <Route path=\"/microbiology\" component={Microbiology} />\n            <Route path=\"/createreport\" component={Createreport} />\n            <Route path=\"/getreport\" component={Getreport} />\n            <Route path=\"/pricing\" component={Pricing} />\n            <Route component={Nomatch} />\n          </Switch>\n        </Router>\n      </Layout>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}